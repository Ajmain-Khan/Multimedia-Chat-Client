#+property: header-args -n -r -l "[{(<%s>)}]" :tangle-mode (identity 0444) :noweb yes :mkdirp yes
* Server

** Main

*** Imports

- =click= is a cli utility
- =module_installed=, from =nanite=, allows you to safely and easily import a local python file
    - Used to import the file with the libthread class and libmessage class

#+name: imports
#+begin_src python
# Imports
import click
import selectors
import socket
import sys
import traceback

import libmessage
#+end_src

*** Click

Use decorators to pass the following to the main function:

| Option        | Default     |
|---------------+-------------|
| =port=        | =2021=      |
| =host=        | =127.0.0.1= |
| =max-clients= | =25=        |
| =password=    | =N/A=       |

#+name: click
#+begin_src python
@click.command()
@click.option("-P", "--port", default=2021, help="Port number")

# Use an empty string to listen on all interfaces
@click.option("-h", "--host", default="127.0.0.1", help="Host address")

@click.option("-c", "--max-clients", default=25, help="Maximum number of clients")
# @click.option("-p", "--password", prompt="Set the password:\n\t", help="Server password", required = True)
#+end_src

*** Socket

This creates a socket using a context manager, which will automatically close the socket once the =with=
statement has finished running; it is called with the following objects:

| Description    | Value  | Object               |
|----------------+--------+----------------------|
| Address Family | =IPv4= | =socket.AF_INET=     |
| Socket Type    | =TCP=  | =socket.SOCK_STREAM= |

#+name: initialize-socket
#+begin_src python
lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#+end_src

This will prevent the "Address already in use" error, which occurs when a previously used TCP socket on the same port
has connections in the =TIME_WAIT= state:

#+name: setsockopt
#+begin_src python
lsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
#+end_src

Avoid blocking, allowing the selector "sel" to respond to events on more than one socket:

#+name: dont-block-lsock
#+begin_src python
lsock.setblocking(False)
#+end_src

*** Selector

Register the listening socket "lsock" to be monitored for read events; note that "data" is currently set to a None type:

#+name: register-lsock
#+begin_src python
sel.register(lsock, selectors.EVENT_READ, data=None)
#+end_src

Block until "lsock" is ready for communication, then return a list of (key, event) tuples for each socket registered with 
the selector:

#+name: block-lsock-return-key-event
#+begin_src python
events = sel.select(timeout=None)
#+end_src

This is where the None type from registering "lsock" with the "sel" selector comes in handy: if "key.data" is None,
we know it's "lsock", and we'll have to accept the connection to start listening for events.

=conn.setblocking(False)= will allow other client sockets to continue functioning should the current socket stall
for whatever reason.

For the last line, the message object above, while initially set only to monitor for read events,
will be set to monitor write events instead once the request has been read.

#+name: if-data-none
#+begin_src python
if key.data is None:
    
    # Note that "key.fileobj" here is currently "lsock"
    conn, addr = key.fileobj.accept()

    print("accepted connection from", addr)
    conn.setblocking(False)
    message = libmessage.Message(sel, conn, addr)
    sel.register(conn, selectors.EVENT_READ, data=message)
#+end_src

When the key has data, i.e. is not a None type, then the key is for a client socket;
since the connection has already been accepted, we just need to connect to the socket to service it.

#+name: if-data-none-else
#+begin_src python
else:
    message = key.data

    try:
        message.process_events(mask)
    except Exception:
        print(
            "main: error: exception for",
            f"{message.addr}:\n\t{traceback.format_exc()}\n\n"
        )
        message.close()
#+end_src
